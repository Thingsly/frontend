name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name'
        required: false
        default: 'latest'
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.14.0

      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies and build
        run: |
          npm install -g pnpm@10.11.0
          pnpm i
          pnpm build:4096

      - name: Compress build output
        run: tar -czf dist.tar.gz -C dist .

      - name: Delete existing release if it exists
        id: delete_release
        run: |
          tag=${{ github.event.inputs.tag || 'latest' }}
          release_id=$(curl -s -H "Authorization: token ${{ secrets.TOKEN_RELEASE }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag" | \
            jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "Deleting existing release with ID $release_id"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.TOKEN_RELEASE }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          else
            echo "No existing release found for tag ${{ github.event.inputs.tag }}"
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}
        with:
          tag_name: ${{ github.event.inputs.tag  || 'latest' }}
          release_name: Release ${{ github.event.inputs.tag  || 'latest' }}
          body: Release created by GitHub Actions. Tag ${{ github.event.inputs.tag  || 'latest' }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.tar.gz
          asset_name: dist.tar.gz
          asset_content_type: application/gzip